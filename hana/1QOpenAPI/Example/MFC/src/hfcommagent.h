#if !defined(AFX_HFCOMMAGENT_H__EA1C31E9_E73B_4C31_AE61_920780CAF043__INCLUDED_)
#define AFX_HFCOMMAGENT_H__EA1C31E9_E73B_4C31_AE61_920780CAF043__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CHFCommAgent wrapper class

class CHFCommAgent : public CWnd
{
protected:
	DECLARE_DYNCREATE(CHFCommAgent)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x3f33ce3e, 0x64c1, 0x4437, { 0xae, 0x66, 0x3e, 0xfa, 0x98, 0xd, 0x30, 0x4a } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	long CommInit();
	void CommTerminate(long bSocketClose);
	long CommGetConnectState();
	long CommLogin(LPCTSTR sUserID, LPCTSTR sPwd, LPCTSTR sCertPwd);
	long CommLogout(LPCTSTR sUserID);
	long GetLoginState();
	void SetLoginMode(long nOption, long nMode);
	long GetLoginMode(long nOption);
	long LoadTranResource(LPCTSTR strFilePath);
	long LoadRealResource(LPCTSTR strFilePath);
	long CreateRequestID();
	CString GetCommRecvOptionValue(long nOptionType);
	void ReleaseRqId(long nRqId);
	long SetTranInputData(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItem, LPCTSTR strValue);
	long RequestTran(long nRqId, LPCTSTR sTrCode, LPCTSTR sIsBenefit, LPCTSTR sPrevOrNext, LPCTSTR sPrevNextKey, LPCTSTR sScreenNo, LPCTSTR sTranType, long nRequestCount);
	long GetTranOutputRowCnt(LPCTSTR strTrCode, LPCTSTR strRecName);
	CString GetTranOutputData(LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItemName, long nRow);
	long SetTranInputArrayCnt(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, long nRecCnt);
	long SetTranInputArrayData(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItem, LPCTSTR strValue, long nArrayIndex);
	long SetFidInputData(long nRqId, LPCTSTR strFID, LPCTSTR strValue);
	long RequestFid(long nRqId, LPCTSTR strOutputFidList, LPCTSTR strScreenNo);
	long RequestFidArray(long nRqId, LPCTSTR strOutputFidList, LPCTSTR strPreNext, LPCTSTR strPreNextContext, LPCTSTR strScreenNo, long nRequestCount);
	long GetFidOutputRowCnt(long nRequestId);
	CString GetFidOutputData(long nRequestId, LPCTSTR strFID, long nRow);
	long GetCommFidDataBlock(long pVVector);
	long SetPortfolioFidInputData(long nRqId, LPCTSTR strSymbolCode, LPCTSTR strSymbolMarket);
	long RegisterReal(LPCTSTR strRealName, LPCTSTR strRealKey);
	long UnRegisterReal(LPCTSTR strRealName, LPCTSTR strRealKey);
	long AllUnRegisterReal();
	CString GetRealOutputData(LPCTSTR strRealName, LPCTSTR strItemName);
	long GetCommRealRecvDataBlock(long pVector);
	CString GetLastErrMsg();
	CString GetApiAgentModulePath();
	CString GetEncrpyt(LPCTSTR strPlainText);
	void SetOffAgentMessageBox(long nOption);
	CString SetOptionalFunction(long nOption, long nValue1, long nValue2, LPCTSTR strValue1, LPCTSTR strValue2);
	CString GetAccInfo(long nOption, LPCTSTR szAccNo);
	long GetUserAccCnt();
	CString GetUserAccNo(long nIndex);
	CString GetLBSIPList();
	void SetConnectIPList(LPCTSTR strIP);
	void SetChangePort(long bChangePort);
	BOOL VerifyRequestCode(LPCTSTR strCode);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_HFCOMMAGENT_H__EA1C31E9_E73B_4C31_AE61_920780CAF043__INCLUDED_)
