// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "hfcommagent.h"

/////////////////////////////////////////////////////////////////////////////
// CHFCommAgent

IMPLEMENT_DYNCREATE(CHFCommAgent, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CHFCommAgent properties

/////////////////////////////////////////////////////////////////////////////
// CHFCommAgent operations

long CHFCommAgent::CommInit()
{
	long result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CHFCommAgent::CommTerminate(long bSocketClose)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 bSocketClose);
}

long CHFCommAgent::CommGetConnectState()
{
	long result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CHFCommAgent::CommLogin(LPCTSTR sUserID, LPCTSTR sPwd, LPCTSTR sCertPwd)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 sUserID, sPwd, sCertPwd);
	return result;
}

long CHFCommAgent::CommLogout(LPCTSTR sUserID)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 sUserID);
	return result;
}

long CHFCommAgent::GetLoginState()
{
	long result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CHFCommAgent::SetLoginMode(long nOption, long nMode)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 nOption, nMode);
}

long CHFCommAgent::GetLoginMode(long nOption)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nOption);
	return result;
}

long CHFCommAgent::LoadTranResource(LPCTSTR strFilePath)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 strFilePath);
	return result;
}

long CHFCommAgent::LoadRealResource(LPCTSTR strFilePath)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 strFilePath);
	return result;
}

long CHFCommAgent::CreateRequestID()
{
	long result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CHFCommAgent::GetCommRecvOptionValue(long nOptionType)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 nOptionType);
	return result;
}

void CHFCommAgent::ReleaseRqId(long nRqId)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 nRqId);
}

long CHFCommAgent::SetTranInputData(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItem, LPCTSTR strValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strTrCode, strRecName, strItem, strValue);
	return result;
}

long CHFCommAgent::RequestTran(long nRqId, LPCTSTR sTrCode, LPCTSTR sIsBenefit, LPCTSTR sPrevOrNext, LPCTSTR sPrevNextKey, LPCTSTR sScreenNo, LPCTSTR sTranType, long nRequestCount)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, sTrCode, sIsBenefit, sPrevOrNext, sPrevNextKey, sScreenNo, sTranType, nRequestCount);
	return result;
}

long CHFCommAgent::GetTranOutputRowCnt(LPCTSTR strTrCode, LPCTSTR strRecName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 strTrCode, strRecName);
	return result;
}

CString CHFCommAgent::GetTranOutputData(LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItemName, long nRow)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 strTrCode, strRecName, strItemName, nRow);
	return result;
}

long CHFCommAgent::SetTranInputArrayCnt(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, long nRecCnt)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strTrCode, strRecName, nRecCnt);
	return result;
}

long CHFCommAgent::SetTranInputArrayData(long nRqId, LPCTSTR strTrCode, LPCTSTR strRecName, LPCTSTR strItem, LPCTSTR strValue, long nArrayIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strTrCode, strRecName, strItem, strValue, nArrayIndex);
	return result;
}

long CHFCommAgent::SetFidInputData(long nRqId, LPCTSTR strFID, LPCTSTR strValue)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strFID, strValue);
	return result;
}

long CHFCommAgent::RequestFid(long nRqId, LPCTSTR strOutputFidList, LPCTSTR strScreenNo)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strOutputFidList, strScreenNo);
	return result;
}

long CHFCommAgent::RequestFidArray(long nRqId, LPCTSTR strOutputFidList, LPCTSTR strPreNext, LPCTSTR strPreNextContext, LPCTSTR strScreenNo, long nRequestCount)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strOutputFidList, strPreNext, strPreNextContext, strScreenNo, nRequestCount);
	return result;
}

long CHFCommAgent::GetFidOutputRowCnt(long nRequestId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRequestId);
	return result;
}

CString CHFCommAgent::GetFidOutputData(long nRequestId, LPCTSTR strFID, long nRow)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 nRequestId, strFID, nRow);
	return result;
}

long CHFCommAgent::GetCommFidDataBlock(long pVVector)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 pVVector);
	return result;
}

long CHFCommAgent::SetPortfolioFidInputData(long nRqId, LPCTSTR strSymbolCode, LPCTSTR strSymbolMarket)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 nRqId, strSymbolCode, strSymbolMarket);
	return result;
}

long CHFCommAgent::RegisterReal(LPCTSTR strRealName, LPCTSTR strRealKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 strRealName, strRealKey);
	return result;
}

long CHFCommAgent::UnRegisterReal(LPCTSTR strRealName, LPCTSTR strRealKey)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 strRealName, strRealKey);
	return result;
}

long CHFCommAgent::AllUnRegisterReal()
{
	long result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CHFCommAgent::GetRealOutputData(LPCTSTR strRealName, LPCTSTR strItemName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 strRealName, strItemName);
	return result;
}

long CHFCommAgent::GetCommRealRecvDataBlock(long pVector)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
				 pVector);
	return result;
}

CString CHFCommAgent::GetLastErrMsg()
{
	CString result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CHFCommAgent::GetApiAgentModulePath()
{
	CString result;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CHFCommAgent::GetEncrpyt(LPCTSTR strPlainText)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 strPlainText);
	return result;
}

void CHFCommAgent::SetOffAgentMessageBox(long nOption)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 nOption);
}

CString CHFCommAgent::SetOptionalFunction(long nOption, long nValue1, long nValue2, LPCTSTR strValue1, LPCTSTR strValue2)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 nOption, nValue1, nValue2, strValue1, strValue2);
	return result;
}

CString CHFCommAgent::GetAccInfo(long nOption, LPCTSTR szAccNo)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 nOption, szAccNo);
	return result;
}

long CHFCommAgent::GetUserAccCnt()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString CHFCommAgent::GetUserAccNo(long nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
				 nIndex);
	return result;
}

CString CHFCommAgent::GetLBSIPList()
{
	CString result;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CHFCommAgent::SetConnectIPList(LPCTSTR strIP)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 strIP);
}

void CHFCommAgent::SetChangePort(long bChangePort)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
				 bChangePort);
}

BOOL CHFCommAgent::VerifyRequestCode(LPCTSTR strCode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strCode);

	return result;
}